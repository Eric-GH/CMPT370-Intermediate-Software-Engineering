package Sort;

/**
 * Yuecheng Rong
 */

import database.GoConnection;
import google.GetDistance;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;

public class SearchRestaurants {
    GoConnection connection = new GoConnection();
    GetDistance getDistance = new GetDistance();

    String Query;
    public String message;

    /**
     * The super array that contains all the  information of the restaurant been searched.
     */
    public ArrayList<SortInfo> sortInfos = new ArrayList<>();


    public void Search(String search) {

        if (connection.coon == null) {
            connection.connect();
        }
        // Start new search
        allClear();
        // If input no dish name, then sort cannot be done
        if (search.equals("") || search.equals(null)) {
            /**
             * Panel should appear instead of stdout
             */
            message = "Cannot search the empty input";
            try {
                connection.coon.close();
            } catch (SQLException e) {
                e.getStackTrace();
            }
        } else if (connection.coon != null) {

            search = "%" + search.toLowerCase() + "%";

            Query = "select r.id, \n" +
                    "r.restaurant_name,\n" +
                    "l.house_num, \n" +
                    "l.street, \n" +
                    "l.city,\n" +
                    "l.province,\n" +
                    "r.waiting_time,\n" +
                    "rv.stars, \n" +
                    "r.avg_price \n"+
                    "from restaurants r\n" +
                    "LEFT JOIN locations l ON  r.user_id = l.user_id\n" +
                    "LEFT JOIN reviews rv ON  rv.restaurant_id = r.id\n" +
                    "where LOWER(restaurant_name) like ? ";

            try {
                // What will be returned
                PreparedStatement ppstmt = connection.coon.prepareStatement(Query);
                // The first question mark
                ppstmt.setString(1, search);
                // execute the query. rs = what is returned
                ResultSet rs = ppstmt.executeQuery();

                if (rs.next()) {
                    do {
                        if (rs.getInt(1) != 10) {
                            setSortInfos(rs);
                            message = "Found";
                        }
                    } while (rs.next());
                } else {
                    /**
                     * Should be: panel: Not found
                     */
                    message = "Not found";
                }
            } catch (SQLException e) {
                e.getStackTrace();
            }
        }
    }

    /**
     * Helper function that clear all the inner ArrayLists
     */
    private void allClear() {
        sortInfos.clear();
        Query = null;
    }

    /**
     * This is a helper function to store the information generated into the super array
     * Will be use by sort in both login and not login situation
     *
     * @param resultSet the result generated by executing SQL
     */
    public void setSortInfos(ResultSet resultSet) {
            try {
                SortInfo sortInfo = new SortInfo();
                    sortInfo.setRest_id(resultSet.getInt(1));
                sortInfo.setRest_name(resultSet.getString(2));
                sortInfo.setRest_address(resultSet.getInt(3) + " " +
                        resultSet.getString(4) + " " +
                        resultSet.getString(5) + " " +
                        resultSet.getString(6));
                sortInfo.setRest_time(resultSet.getTime(7));
                sortInfo.setRest_rate(resultSet.getFloat(8));
                sortInfo.setRest_avg_price(resultSet.getFloat(9));
                sortInfos.add(sortInfo);
            } catch (SQLException e) {
                message = e.fillInStackTrace().toString();
            }

        }


    /**
     * The main function of sort by waiting time.
     */
    public void sortByTime() {
        Collections.sort(sortInfos, SortInfo.timeComparator);

    }


    /**
     * The main function of sort by rate.
     */
    public void sortByRate() {
        Collections.sort(sortInfos, SortInfo.rateComparator);
    }

    /**
     * The main function of sort by average price.
     */
    public void sortByPrice() {
        Collections.sort(sortInfos,SortInfo.priceComparator);
    }

    /**
     * The main function of sort by distance.
     */
    public void sortByDistance(int id) {
        // If customer did not log in
        if (id == 0) {
            System.err.println("Did not log in, cannot generate address");
            return;
        }
        String customerAddress = getCustomerAddress(id);
        for (int i = 0; i < sortInfos.size(); i++) {
            if(sortInfos.get(i).getDistance() == 0.0){
                String restaurantAddress = sortInfos.get(i).getRest_address();
                sortInfos.get(i).setDistance(getDistance.getFloatDistance(customerAddress,restaurantAddress));
                if(i != sortInfos.size() - 1) {
                    if (sortInfos.get(i).getRest_id() == sortInfos.get(i + 1).getRest_id()) {
                        sortInfos.get(i + 1).setDistance(sortInfos.get(i).getDistance());
                    }
                }
            }
        }
        Collections.sort(sortInfos,SortInfo.distanceComparator);
    }



    private String getCustomerAddress(int customer_id){
        String getCustomerAddress = " ";
        try {
            if (connection.coon == null) {
                connection.connect();
            }
            String query1 = "select l.house_num, l.street, l.city, l.province from locations l, customers c\n" +
                    "where l.user_id = (SELECT c.user_id WHERE c.id = ?)";
            PreparedStatement ppsmt = connection.coon.prepareStatement(query1);
            ppsmt.setInt(1, customer_id);
            ResultSet resultSet1 = ppsmt.executeQuery();
            if (resultSet1.next()) {
                getCustomerAddress = resultSet1.getInt(1) + " " + resultSet1.getString(2) + " " +
                        resultSet1.getString(3) + " " + resultSet1.getString(4);
                System.out.println(getCustomerAddress);
            } else {
                message = "not found this customer";
            }
            connection.coon.close();
        }catch (SQLException e)
        {
            message = e.fillInStackTrace().toString();
        }
        return getCustomerAddress;
    }



    /**
     * Helper function that can print the super array on the console.
     */
    public void printSuperArray() {
        for (int i = 0; i < sortInfos.size(); i++) {
            System.out.println(sortInfos.get(i));
        }
    }






    public static void main(String[] argcs){
        SearchRestaurants searchRestaurants = new SearchRestaurants();

        searchRestaurants.Search("t");
        System.out.println(searchRestaurants.message);
        searchRestaurants.sortByDistance(2);
        searchRestaurants.printSuperArray();

    }




}


